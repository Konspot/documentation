"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[206],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return m}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var o=a.createContext({}),s=function(e){var t=a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=s(e.components);return a.createElement(o.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,o=e.parentName,u=p(e,["components","mdxType","originalType","parentName"]),d=s(n),m=r,g=d["".concat(o,".").concat(m)]||d[m]||c[m]||i;return n?a.createElement(g,l(l({ref:t},u),{},{components:n})):a.createElement(g,l({ref:t},u))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=d;var p={};for(var o in t)hasOwnProperty.call(t,o)&&(p[o]=t[o]);p.originalType=e,p.mdxType="string"==typeof e?e:r,l[1]=p;for(var s=2;s<i;s++)l[s]=n[s];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},4974:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return o},default:function(){return m},frontMatter:function(){return p},metadata:function(){return s},toc:function(){return c}});var a=n(7462),r=n(3366),i=(n(7294),n(3905)),l=["components"],p={sidebar_position:2},o="API's Methods & Functions",s={unversionedId:"api-reference/api-methods",id:"api-reference/api-methods",title:"API's Methods & Functions",description:"Lets discuss and go through Konspot API functions and methods to control your embedded Konspot Meet Conference.",source:"@site/docs/api-reference/api-methods.md",sourceDirName:"api-reference",slug:"/api-reference/api-methods",permalink:"/api-reference/api-methods",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/api-reference/api-methods.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Integration",permalink:"/api-reference/integration"}},u={},c=[{value:"Functions",id:"functions",level:2},{value:"Commands",id:"commands",level:2},{value:"Events",id:"events",level:2}],d={toc:c};function m(e){var t=e.components,n=(0,r.Z)(e,l);return(0,i.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"apis-methods--functions"},"API's Methods & Functions"),(0,i.kt)("p",null,"Lets discuss and go through Konspot API functions and methods to control your embedded Konspot Meet Conference."),(0,i.kt)("h2",{id:"functions"},"Functions"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"getAvailableDevices")),(0,i.kt)("p",null,"Retrieves a list of available devices."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"api.getAvailableDevices().then(devices => {\n    // devices = {\n    //     audioInput: [{\n    //         deviceId: 'ID'\n    //         groupId: 'grpID'\n    //         kind: 'audioinput'\n    //         label: 'label'\n    //     },....],\n    //     audioOutput: [{\n    //         deviceId: 'ID'\n    //         groupId: 'grpID'\n    //         kind: 'audioOutput'\n    //         label: 'label'\n    //     },....],\n    //     videoInput: [{\n    //         deviceId: 'ID'\n    //         groupId: 'grpID'\n    //         kind: 'videoInput'\n    //         label: 'label'\n    //     },....]\n    // }\n    ...\n});\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"getCurrentDevices")),(0,i.kt)("p",null,"Retrieves a list of currently selected devices."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"api.getCurrentDevices().then(devices => {\n    // devices = {\n    //     audioInput: {\n    //         deviceId: 'ID'\n    //         groupId: 'grpID'\n    //         kind: 'videoInput'\n    //         label: 'label'\n    //     },\n    //     audioOutput: {\n    //         deviceId: 'ID'\n    //         groupId: 'grpID'\n    //         kind: 'videoInput'\n    //         label: 'label'\n    //     },\n    //     videoInput: {\n    //         deviceId: 'ID'\n    //         groupId: 'grpID'\n    //         kind: 'videoInput'\n    //         label: 'label'\n    //     }\n    // }\n    ...\n});\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"getParticipantsInfo")),(0,i.kt)("p",null,"Returns an array containing participant information such as ID, display name, avatar URL, and email."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"api.getParticipantsInfo();\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"getVideoQuality")),(0,i.kt)("p",null,"Returns the current video quality setting."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"api.getVideoQuality();\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"isDeviceChangeAvailable")),(0,i.kt)("p",null,"Resolves to true if the device change is available and to false if not."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"// The accepted deviceType values are - 'output', 'input' or undefined.\napi.isDeviceChangeAvailable(deviceType).then(isDeviceChangeAvailable => {\n    ...\n});\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"isDeviceListAvailable")),(0,i.kt)("p",null,"Resolves to true if the device list is available and to false if not."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"api.isDeviceListAvailable().then(isDeviceListAvailable => {\n    ...\n});\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"pinParticipant")),(0,i.kt)("p",null,"Selects the participant ID to be the pinned participant in order to always receive video for this participant."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"api.pinParticipant(participantId);\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"setAudioInputDevice")),(0,i.kt)("p",null,"Sets the audio input device to the one with the passed label or ID."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"api.setAudioInputDevice(deviceLabel, deviceId);\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"setAudioOutputDevice")),(0,i.kt)("p",null,"Sets the audio output device to the one with the passed label or ID."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"api.setAudioOutputDevice(deviceLabel, deviceId);\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"setLargeVideoParticipant")),(0,i.kt)("p",null,"Displays the participant with the given participant ID on the large video.If no participant ID is given, a participant is picked based on the dominant, pinned speaker settings."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"api.setLargeVideoParticipant(participantId);\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"setVideoInputDevice")),(0,i.kt)("p",null,"Sets the video input device to the one with the passed label or ID."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"api.setVideoInputDevice(deviceLabel, deviceId);\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"getNumberOfParticipants")),(0,i.kt)("p",null,"Returns the number of conference participants:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"api.getNumberOfParticipants();\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"getAvatarURL")),(0,i.kt)("p",null,"Returns a participant's avatar URL:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"api.getAvatarURL(participantId);\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"getDisplayName")),(0,i.kt)("p",null,"Returns a participant's display name:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"api.getDisplayName(participantId);\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"getEmail")),(0,i.kt)("p",null,"Returns a participant's email:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"api.getEmail(participantId);\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"isAudioMuted")),(0,i.kt)("p",null,"Returns a Promise which resolves to the current audio muted state:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"api.isAudioMuted().then(muted => {\n    ...\n});\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"isVideoMuted")),(0,i.kt)("p",null,"Returns a Promise which resolves to the current video muted state:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"api.isVideoMuted().then(muted => {\n    ...\n});\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"isAudioAvailable")),(0,i.kt)("p",null,"Returns a Promise which resolves to the current audio availability state:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"api.isAudioAvailable().then(available => {\n    ...\n});\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"isVideoAvailable"),"\nReturns a Promise which resolves to the current video availability state:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"api.isVideoAvailable().then(available => {\n    ...\n});\n")),(0,i.kt)("h2",{id:"commands"},"Commands"),(0,i.kt)("p",null,"You can control the embedded Konspot Meet conference by calling executeCommand on the KonspotVideoApi object:"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"displayName")),(0,i.kt)("p",null,"Sets the display name of the local participant."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"api.executeCommand('displayName', 'New Nickname');\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"email")),(0,i.kt)("p",null,"Changes the local email address."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"api.executeCommand('email', 'example@example.com');\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"avatarUrl")),(0,i.kt)("p",null,"Changes the local avatar URL."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"api.executeCommand('avatarUrl', 'https://example.com/u/3671647');\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"toggleAudio")),(0,i.kt)("p",null,"Mutes / unmutes the audio for the local participant."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"api.executeCommand('toggleAudio');\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"toggleVideo")),(0,i.kt)("p",null,"Mutes / unmutes the video for the local participant."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"api.executeCommand('toggleVideo');\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"toggleShareScreen")),(0,i.kt)("p",null,"Start or stop screen sharing."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"api.executeCommand('toggleShareScreen');\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"toggleTileView")),(0,i.kt)("p",null,"Enter or exit the tile view layout mode."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"api.executeCommand('toggleTileView');\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"setVideoQuality")),(0,i.kt)("p",null,"Sets the send and receive video resolution."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"api.executeCommand('setVideoQuality',720);\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"setTileView")),(0,i.kt)("p",null,"Enables or disables the tileview mode."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"api.executeCommand('setTileView',\n    ```\n\n**enabled: boolean**\n\n);\ntoggleCamera\nToggles the front/back camera on mobile web.\n\n```js\napi.executeCommand('toggleCamera');\n")),(0,i.kt)("h2",{id:"events"},"Events"),(0,i.kt)("p",null,"The KonspotVideoApi object implements the EventEmitter API for emitting and listening for events."),(0,i.kt)("p",null,"You can add event listeners to the embedded Konspot Meet using the addListener method:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"api.addListener(event, listener);\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"If you want to remove a listener you can use the removeListener method:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"api.removeListener(event, listener);\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"participantJoined")),(0,i.kt)("p",null,"Provides event notifications about new participants who join the room."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"{\n    id: string, // the id of the participant\n    displayName: string // the display name of the participant\n}\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"participantLeft")),(0,i.kt)("p",null,"Provides event notifications about participants that leave the meeting room."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"{\n    id: string // the id of the participant\n}\n")))}m.isMDXComponent=!0}}]);